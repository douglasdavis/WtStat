#!/usr/bin/env python

from WtStat.sorting import create_nominal_executions
from WtStat.sorting import sort_for_nominal_tree
from WtStat.sorting import sort_for_systematic_trees
from WtStat.sorting import create_systtree_executions
from WtStat.fitgen import fit_workspace
import subprocess
import argparse


def parseargs():
    parser = argparse.ArgumentParser(description="WtStat executions")

    subcommands = parser.add_subparsers(dest="topcommand")

    histgen = subcommands.add_parser("histgen")
    histgen.add_argument(
        "--files",
        dest="files",
        type=str,
        nargs="+",
        help="file list to sort and histogram",
        required=True,
    )
    histgen.add_argument(
        "--run-sys-weights",
        dest="sys_weights",
        action="store_true",
        help="run systematic weights",
    )
    histgen.add_argument(
        "--out-file",
        dest="outfile_name",
        default="histograms.root",
        required=False,
        help="output file name",
    )
    histgen.add_argument(
        "--yaml-config",
        dest="yaml_config",
        type=str,
        required=True,
        help="YAML filter and template config",
    )
    histgen.add_argument(
        "--dry",
        dest="dry",
        action="store_true",
        help="don't execute, just print commands",
    )

    confgen = subcommands.add_parser("fitgen")
    confgen.add_argument(
        "-n",
        "--name",
        dest="name",
        type=str,
        help="fit name (trex-fitter will create a directory with this name)",
        required=True,
    )
    confgen.add_argument(
        "-f",
        "--hfile",
        dest="hfile",
        type=str,
        help="file which contains the histogram",
        required=True,
    )
    confgen.add_argument(
        "-o",
        "--outdir",
        dest="outdir",
        type=str,
        help="output directory to save fit scripts",
        required=True,
    )
    confgen.add_argument(
        "-l",
        "--lumi",
        dest="lumi",
        type=float,
        help="luminosity to scale to for the fit (wt-stat histograrms are 1/fb)",
        required=False,
        default=140.5,
    )
    confgen.add_argument(
        "--ncpu",
        dest="ncpu",
        type=int,
        help="NumCPU TRExFitter option",
        required=False,
        default=2,
    )
    confgen.add_argument(
        "--dovrplots",
        dest="dovrplots",
        action="store_true",
        help="Include blocks which will request the generation of VR plots",
    )
    return parser.parse_args()


def histgen(args):
    nominal_sorted = sort_for_nominal_tree(args.files)
    sys_sorted = sort_for_systematic_trees(args.files)
    nom_exes = create_nominal_executions(
        nominal_sorted, outfile=args.outfile_name, sys_weights=args.sys_weights
    )
    sys_exes = create_systtree_executions(sys_sorted, outfile=args.outfile_name)
    for exe in nom_exes + sys_exes:
        if args.dry:
            print("{} -y {}".format(exe, args.yaml_config))
        else:
            subprocess.call("{} -y {}".format(exe, args.yaml_config), shell=True)
    return 0


def main():
    args = parseargs()

    if args.topcommand == "histgen":
        return histgen(args)

    if args.topcommand == "fitgen":
        fit_workspace(
            args.name,
            args.hfile,
            args.outdir,
            args.lumi,
            args.ncpu,
            skip_vrplots=(not args.dovrplots),
        )


if __name__ == "__main__":
    main()
