#!/usr/bin/env python

from WtStat.sorting import create_nominal_executions
from WtStat.sorting import sort_for_nominal_tree
from WtStat.sorting import sort_for_systematic_trees
from WtStat.sorting import create_systtree_executions
from WtStat.utils import parallel_subprocess
from WtStat.fitgen import fit_workspace
from WtStat.ntuple_fitgen import ntuple_fit
from WtStat.trex2html import trex2html
import subprocess
import argparse
import time

import logging

logging.basicConfig(
    level=logging.INFO, format="{:20}  %(levelname)s  %(message)s".format("[WtStat:%(name)s]")
)

# fmt: off
def parseargs():
    parser = argparse.ArgumentParser(description="WtStat executions")

    subcommands = parser.add_subparsers(dest="topcommand")

    histgen = subcommands.add_parser("histgen", help="generate templates (histograms) from ntuples")
    histgen.add_argument("--files", dest="files", type=str, nargs="+",
                         help="file list to sort and histogram", required=True)
    histgen.add_argument("--run-sys-weights", dest="sys_weights", action="store_true",
                         help="run systematic weights")
    histgen.add_argument("--out-file", dest="outfile_name", default="histograms.root", required=False,
                         help="output file name")
    histgen.add_argument("--yaml-config", dest="yaml_config", type=str, required=True,
                         help="YAML filter and template config")
    histgen.add_argument("--tree-prefix", dest="tree_prefix", type=str, required=False, default="WtTMVA",
                         help="ROOT Tree prefix (WtLoop or WtTMVA)")
    histgen.add_argument("--dry", dest="dry", action="store_true", help="don't execute, just print commands")

    hfitgen = subcommands.add_parser("fitgen", help="generate fit config which uses pre-made templates")
    hfitgen.add_argument("-n", "--name", dest="name", type=str, help="fit name", required=True)
    hfitgen.add_argument("-f", "--hfile", dest="hfile", type=str, help="file containing histogram", required=True)
    hfitgen.add_argument("-o", "--outdir", dest="outdir", type=str, help="output directory", required=True)
    hfitgen.add_argument("-l", "--lumi", dest="lumi", type=float, help="luminosity", required=False, default=140.5)
    hfitgen.add_argument("--ncpu", dest="ncpu", type=int, help="NumCPU TRExFitter option", required=False, default=2)
    hfitgen.add_argument("--vrplots", dest="vrplots", type=str, required=False,
                         help="YAML config for blocks which will request the generation of VR plots")
    hfitgen.add_argument("--skip-pdfs", dest="skip_pdfs", action="store_true", help="Skip PDF uncertainties")

    nfitgen = subcommands.add_parser("ntupfitgen", help="generate fit config which uses ntuples")
    nfitgen.add_argument("-n", "--name", dest="name", type=str, help="fit name", required=True)
    nfitgen.add_argument("-d", "--ntupdir", dest="ntupdir", type=str, help="dir with ntuples", required=True)
    nfitgen.add_argument("-o", "--outdir", dest="outdir", type=str, help="output directory", required=True)
    nfitgen.add_argument("-l", "--lumi", dest="lumi", type=float, help="lumi", default=140.5, required=False)
    nfitgen.add_argument("-r", "--regions", dest="regs", type=str, nargs="+", required=True, help="regions to put in config")
    nfitgen.add_argument("--ncpu", dest="ncpu", type=int, help="number of CPUs", default=2, required=False)

    ntupling = subcommands.add_parser("ntupling", help="steer TRExFitter to run the 'n' step in parallel")
    ntupling.add_argument("-c", "--config", dest="config", type=str, required=True, help="TRExFitter config")
    ntupling.add_argument("-r", "--regions", dest="regions", type=str, nargs="+", required=True, help="Region names")
    ntupling.add_argument("-m", "--max-tasks", dest="maxt", type=int, required=False, default=4, help="Max parallel tasks")

    rank = subcommands.add_parser("rank", help="perform ranking processing in parallel")
    rank.add_argument("-c", "--config", dest="config", type=str, required=True, help="TRExFitter config")
    rank.add_argument("-m", "--max-tasks", dest="maxt", type=int, required=False, default=4, help="Max parallel tasks")
    rank.add_argument("-e", "--exclude", dest="exclude", type=str, required=False, nargs="+", help="Exclude these systematics")
    rank.add_argument("-s", "--sys", dest="sys", type=str, required=False, nargs="+", help="Manually define systematics")

    tohtml = subcommands.add_parser("html", help="generate index.html file for a TRExFitter workspace")
    tohtml.add_argument("workspace", type=str, help="TRExFitter workspace directory")

    return parser.parse_args()
# fmt: on


def histgen(args):
    log = logging.getLogger("wt-stat histgen")
    nominal_sorted = sort_for_nominal_tree(args.files)
    sys_sorted = sort_for_systematic_trees(args.files)
    nom_exes = create_nominal_executions(
        nominal_sorted,
        outfile=args.outfile_name,
        sys_weights=args.sys_weights,
        tree_prefix=args.tree_prefix,
    )
    sys_exes = create_systtree_executions(
        sys_sorted, outfile=args.outfile_name, tree_prefix=args.tree_prefix
    )
    for i, exe in enumerate(nom_exes + sys_exes):
        if args.dry:
            log.info("{} -y {}".format(exe, args.yaml_config))
        else:
            subprocess.call("{} -y {}".format(exe, args.yaml_config), shell=True)
        log.info("{}/{}".format(i + 1, len(nom_exes) + len(sys_exes)))
    return 0


def fitgen(args):
    log = logging.getLogger("wt-stat fitgen")
    fit_workspace(
        args.name,
        args.hfile,
        args.outdir,
        args.lumi,
        args.ncpu,
        skip_pdfs=args.skip_pdfs,
        vrplots=args.vrplots,
    )
    return 0


def ntupfitgen(args):
    log = logging.getLogger("wt-stat ntupfitgen")
    ntuple_fit(
        args.name,
        args.ntupdir,
        args.outdir,
        args.lumi,
        args.ncpu,
        skip_treesys=True,
        skip_weightsys=True,
        skip_pdfs=True,
        vrplots=None,
        regions=args.regs,
    )
    return 0


def ntupling(args):
    log = logging.getLogger("wt-stat ntupling")
    command_pref = "trex-fitter n {} Regions=".format(args.config)
    commands = []
    for region in args.regions:
        commands.append("{}{}".format(command_pref, region))

    parallel_subprocess(commands, max_tasks=args.maxt, logpref="ntupling")
    return 0


def rank(args):
    log = logging.getLogger("wt-stat rank")
    command_pref = "trex-fitter r {} Ranking=".format(args.config)

    commands = []
    if args.sys:
        for entry in args.sys:
            commands.append("{}{}".format(command_pref, entry))
    else:
        with open(args.config, "r") as f:
            for line in f.readlines():
                if "Systematic:" in line:
                    sys = line.strip().split("Systematic: ")[-1].replace('"', "")
                    if args.exclude:
                        if sys in args.exclude:
                            continue
                    commands.append("{}{}".format(command_pref, sys))

    parallel_subprocess(commands, max_tasks=args.maxt, logpref="rank")
    subprocess.Popen("trex-fitter r {} Ranking=plot".format(args.config), shell=True)
    for com in commands:
        print (com)

    return 0

def main():
    args = parseargs()

    if args.topcommand == "histgen":
        return histgen(args)

    if args.topcommand == "fitgen":
        return fitgen(args)

    if args.topcommand == "ntupfitgen":
        return ntupfitgen(args)

    if args.topcommand == "ntupling":
        return ntupling(args)

    if args.topcommand == "rank":
        return rank(args)

    if args.topcommand == "html":
        trex2html(args.workspace)
        return 0

if __name__ == "__main__":
    main()
